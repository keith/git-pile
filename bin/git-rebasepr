#!/usr/bin/env bash

set -euo pipefail

if [[ -n "${GIT_PILE_VERBOSE:-}" ]]; then
  set -x
fi

rebase_args=()
commit=""
for arg in "$@"
do
  case "$arg" in
    -i)
      rebase_args+=("-i")
      shift
      ;;
    *)
      if [[ -n "$commit" ]]; then
        echo "error: multiple commit args passed, '$commit' and '$arg'" >&2
        exit 1
      fi
      commit="$arg"
      ;;
  esac
done

readonly commit_to_rebase=${commit:-HEAD}
branch_name="$(git pilebranchname "$commit_to_rebase")"
if ! git show-ref --quiet "$branch_name"; then
  echo "error: branch '$branch_name' doesn't exist" >&2
  exit 1
fi

worktree_dir="$(git pileworktreepath)"
if [[ ! -d "$worktree_dir" ]]; then
  git worktree add --quiet --force "$worktree_dir" "$branch_name"
else
  git -C "$worktree_dir" switch --quiet "$branch_name"
fi

_detach_branch() {
  git -C "$worktree_dir" switch --detach --quiet
}

trap _detach_branch EXIT

branch_with_remote=$(git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}")
if ! git -C "$worktree_dir" rebase "$branch_with_remote" "${rebase_args[@]:---}"; then
  # TODO: if multiple commits conflict this only handles the first one, after the continue it fails again, we need another mergetool call, in a loop
  if git -C "$worktree_dir" mergetool; then
    if ! GIT_EDITOR=true git -C "$worktree_dir" rebase --continue; then
      git -C "$worktree_dir" rebase --abort
      exit 1
    fi
  else
    git -C "$worktree_dir" rebase --abort
    exit 1
  fi
fi

# TODO: this skips push hooks, not sure if good? maybe pushing in the main repo would be better
git -C "$worktree_dir" push --force-with-lease --quiet --no-verify
