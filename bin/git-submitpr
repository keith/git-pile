#!/usr/bin/env bash

set -euo pipefail

if [[ -n "${GIT_PILE_VERBOSE:-}" ]]; then
  set -x
fi

commit_arg=HEAD
if [[ $# -gt 0 ]]; then
  if [[ $1 != --* ]]; then
    commit_arg="$1"
    shift
  fi

  if [[ ${1:-} == "--onto" ]]; then
    onto_ref="$2"
    shift
    shift
  fi
fi

commit="$(git rev-parse "$commit_arg")"
upstream_ref="@{upstream}"
branch_name="${GIT_PILE_PREFIX:-}$(git show --no-patch --format=%f "$commit" | tr '[:upper:]' '[:lower:]')"

if [[ -n "${onto_ref:-}" ]]; then
  base_branch_name="${GIT_PILE_PREFIX:-}$(git show --no-patch --format=%f "$onto_ref" | tr '[:upper:]' '[:lower:]')"
  upstream_ref="$base_branch_name@{upstream}"
fi

if git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch named '$branch_name' already exists, maybe you've already created the PR for this commit?" >&2
  exit 1
fi

branch_with_remote=$(git rev-parse --abbrev-ref --symbolic-full-name "$upstream_ref")
remote_branch_name="${branch_with_remote#*/}"

git branch --no-track "$branch_name" "$upstream_ref"

worktree_dir="$(git pileworktreepath)"
if [[ ! -d "$worktree_dir" ]]; then
  git worktree add --quiet --force "$worktree_dir" "$branch_name"
else
  # TODO: I've had the repo be in a bad state and maybe we need a cherry pick abort here, or on the cleanup instead
  if ! git -C "$worktree_dir" switch --quiet "$branch_name"; then
    git branch -D "$branch_name"
    exit 1
  fi
fi

_detach_branch() {
  git -C "$worktree_dir" switch --detach --quiet
}

trap _detach_branch EXIT

if ! git -C "$worktree_dir" cherry-pick "$commit" >/dev/null; then
  if git -C "$worktree_dir" mergetool; then
    if ! git -C "$worktree_dir" -c core.editor=true cherry-pick --continue; then
      git -C "$worktree_dir" cherry-pick --abort || true
      _detach_branch
      git branch -D "$branch_name"
      echo "error: cherry picking failed, maybe there wasn't a commit to cherry pick?" >&2
      exit 1
    fi
  else
    git -C "$worktree_dir" cherry-pick --abort
    _detach_branch
    git branch -D "$branch_name"
    exit 1
  fi
fi

native_open () {
  if command -v open >/dev/null; then
    open "$1"
  elif command -v xdg-open >/dev/null; then
    xdg-open "$1"
  else
    echo "PR is created at $1"
  fi
}

cleanup_remote_branch() {
  if [[ "$(git config --default false --type=bool pile.cleanupRemoteOnSubmitFailure)" != true ]]; then
    return
  fi

  echo "error: failed to create PR, deleting remote branch..." >&2
  git -C "$worktree_dir" push --quiet --delete origin "$branch_name" || true
  _detach_branch
  git branch -D "$branch_name"
  exit 1
}

error_file=$(mktemp)
if git -C "$worktree_dir" remote get-url mine 2>/dev/null && git -C "$worktree_dir" push --quiet --set-upstream mine "$branch_name"; then
  if command -v gh >/dev/null; then
    # TODO: does gh not support -C either?
    pushd "$worktree_dir" >/dev/null
    # TODO: pass --repo with value from origin?
    gh pr create --web
    popd >/dev/null
  else
    # TODO: Example URL for upstream fork PRs https://github.com/apple/swift/compare/release/5.6...keith:ks/fix-invalid-warning-for-enum-cases-named-self-41520?expand=1
    git -C "$worktree_dir" open --remote mine "pull/new/$branch_name"
  fi
elif git -C "$worktree_dir" push --quiet --set-upstream origin "$branch_name" 2> "$error_file"; then
  if command -v ghb > /dev/null; then
    # TODO maybe ghb should support -C ?
    pushd "$worktree_dir" >/dev/null
    if ! ghb pr --no-edit "$remote_branch_name" "$@"; then
      cleanup_remote_branch
    fi

    popd >/dev/null
  elif command -v gh > /dev/null; then
    # TODO: does gh not support -C either?
    pushd "$worktree_dir" >/dev/null
    body_args=(--fill)
    if [[ -n ${GIT_PILE_USE_PR_TEMPLATE:-} && -f .github/pull_request_template.md ]]; then
      subject=$(git -C "$worktree_dir" show -s --format=%s HEAD)
      body=$(git -C "$worktree_dir" show -s --format=%b HEAD)
      if [[ -n "$body" ]]; then
        body=$(printf '%s\n\n%s' "$body" "$(cat .github/pull_request_template.md)")
      else
        body="$(cat .github/pull_request_template.md)"
      fi
      body_args=(--title "$subject" --body "$body")
    fi

    pr_args=()
    merge_arg=""
    for arg in "$@"
    do
      case "$arg" in
        --merge-squash)
          merge_arg="--squash"
          shift
          ;;
        --merge-rebase)
          merge_arg="--rebase"
          shift
          ;;
        --merge)
          merge_arg="--merge"
          shift
          ;;
        *)
          pr_args+=("$arg")
          shift
          ;;
      esac
    done

    if url=$(gh pr create "${body_args[@]}" --base "$remote_branch_name" "${pr_args[@]:---}" | grep github.com); then
      native_open "$url"

      # TODO: should I set subject and body?
      if [[ -n "$merge_arg" ]] && ! gh pr merge "$url" --auto "$merge_arg"; then
        echo "warning: failed to auto-merge PR with $merge_arg" >&2
        exit 1
      fi
    else
      cleanup_remote_branch
    fi

    popd >/dev/null
  else
    echo "error: no tool to create a PR, install gh: https://cli.github.com/" >&2
    exit 1
  fi
else
  echo "error: failed to create remote branch: $(cat "$error_file")" >&2
  _detach_branch
  git branch -D "$branch_name"
  exit 1
fi
