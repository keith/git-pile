#!/usr/bin/env python3

from typing import List, Dict, Tuple
import argparse
import collections
import os
import subprocess
import sys


class _GitError(Exception):
    pass


def _build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--squash",
        action="store_true",
        help="Squash the commit instead of adding a new commit to the branch",
    )
    return parser


def _run_git_command(args: List[str]) -> str:
    try:
        output: bytes = subprocess.check_output(["git"] + args)
        # TODO: got an exception here at some point
        return output.strip().decode("utf-8")
    except subprocess.CalledProcessError:
        raise _GitError()
    except UnicodeDecodeError:
        print(f"error: output was {output}")
        raise


def _is_in_repo() -> bool:
    try:
        _run_git_command(["rev-parse", "--show-toplevel"])
        return True
    except _GitError:
        return False


def _get_staged_files() -> List[str]:
    statuses = _run_git_command(
        ["diff", "--cached", "--name-status"]
    ).splitlines()
    files = []
    for status in statuses:
        # Modified files are formatted as M<tab>filepath
        # Renamed files are formatted as R%<tab>old path<tab>new path
        files.extend(status.split("\t")[1:])

    return files


def _get_modified_files() -> List[str]:
    return _run_git_command(["diff", "--name-only"]).splitlines()


def _get_possible_shas() -> List[str]:
    return _run_git_command(
        ["log", "--pretty=%H", "@{upstream}..HEAD"]
    ).splitlines()


def _get_changed_files() -> Tuple[List[str], bool]:
    staged_files = _get_staged_files()
    if staged_files:
        return (staged_files, False)

    modified_files = _get_modified_files()
    if modified_files:
        return (modified_files, True)

    return ([], False)


def _files_for_sha(sha: str) -> List[str]:
    return _run_git_command(
        ["show", "--name-only", "--pretty=", sha]
    ).splitlines()


def _shas_by_file(
    shas: List[str], changed_files: List[str]
) -> Dict[str, List[str]]:
    shas_by_file: Dict[str, List[str]] = collections.defaultdict(list)
    for sha in shas:
        for filepath in _files_for_sha(sha):
            if filepath in changed_files:
                shas_by_file[filepath].append(sha)

    return shas_by_file


def _main(squash: bool, commit_args: List[str]) -> None:
    if not _is_in_repo():
        sys.exit("error: not in git repo")

    possible_shas = _get_possible_shas()
    if not possible_shas:
        sys.exit("error: no commits ahead of upstream")

    changed_files, stage_first = _get_changed_files()
    if not changed_files:
        sys.exit("error: no changed files")

    shas_by_file = _shas_by_file(possible_shas, changed_files)
    matching_shas = set(
        sum(
            (
                shas_by_file[filepath]
                for filepath in changed_files
                if filepath in shas_by_file
            ),
            [],
        )
    )

    if not matching_shas:
        sys.exit(
            "error: no commits changed: {}".format(", ".join(changed_files))
        )
    elif len(matching_shas) > 1:
        option_lines = []
        print(
            "Which commit would you like to add your changes to? (ctrl-c to cancel)"
        )
        # TODO: Put shas in committed date order?
        for sha in matching_shas:
            output = subprocess.check_output(
                ["git", "log", "--oneline", "-1", sha]
            ).decode()
            option_lines.append(output)

        try:
            selected_line = subprocess.check_output(
                ["fzy"], input="\n".join(sorted(option_lines)).encode()
            ).decode()
        except subprocess.CalledProcessError:
            sys.exit(1)

        selected_sha = selected_line.split(" ")[0]
    else:
        selected_sha = matching_shas.pop()

    if stage_first:
        _run_git_command(["add"] + changed_files)

    args = commit_args
    if squash:
        args.extend(["-m 'ignore, will be squashed'", "-s"])

    code = subprocess.Popen(["git", "commit"] + args).wait()
    if code != 0:
        raise SystemExit("error: failed to commit, not updating PR")

    update_command = ["git", "updatepr", selected_sha]
    if squash:
        update_command.append("--squash")

    try:
        subprocess.check_call(update_command)
    except subprocess.CalledProcessError:
        sys.exit(1)


if __name__ == "__main__":
    args, commit_args = _build_parser().parse_known_args()
    _main(args.squash, commit_args)
